%--------------------------------------------------------------------------
% Sandbox.m
%
% Description: This program first pulls the most recent data from Johns
% Hopkins' Github account which contains the most up to date CDC and WHO
% data. Using this data, a parser is used to gather the data for a country
% or province of interest. Plots are created to visulize the current
% outbreak of COVID19.
%  
% Author: Isaac Weintraub
%--------------------------------------------------------------------------
clear 
clc
close all
% Population Information for Countries of Interest

popUSA = 327.2e6; popUK = 66.44e6;
popOH = 11.69e6;  popIsrael = 8.712e6;
popFL = 21.3e6;   popTN = 6.77e6;
popSK = 51.47e6;
popItaly =  60.48e6;
popFr = 66.99e6;
popIran = 81.16e6;
popSpain = 46.66e6;
popIceland = 364260;
popChina = 1.386e9;
popNY = 8.623e6;
popEarth = 7.53e9;

population = [35.53e6 2.877e6 41.32e6 76965 29.78e6 102012 44.27e6 ...
              2.973e6 24.6e6 8.822e6 9.898 395361 1.493e6 164.7e6 ...
              285719 9.508e6 11.4e6 11.18e6 807610 11.05e6 3.507e6 ...
              209.3e6 428697 7.05e6 1.19e6 546388 16.01e6  24.05e6 ...
              37.59e6 546388 4.659e6 14.9e6 18.05e6 1.386e9 49.07e6 ...
              81.34e6]
              
% Pull the most up-to-date information
%
% Uncomment or run this in the terminal the first time you run the code
%!git clone https://github.com/CSSEGISandData/COVID-19.git
%!git clone https://github.com/datasets/population.git
cd COVID-19
!git pull
cd ..

%
% Import the data from CSV format to matlab cell or matrix 
%
pops      = importdata("population/data/population.csv");
cases     = importdata("COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv");
deaths    = importdata("COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv");
recovered = importdata("COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv");
%
Country = cases.textdata(:,2);
Province = cases.textdata(:,1);

% % %
% % % Display the Country List Allow User to Select Country of Interest
% % % 
CountryShort = unique(Country);
ProvinceShort = unique(Province);
% % list = CountryShort;
% % [choice,~] = listdlg('ListString',list);
% % isCountry = strcmp(Country,CountryShort(choice));     % Generate Index of Values for the chosen country
% % isCountry = isCountry(2:end);           % Remove Header
% % 
% % 
% % Population(choice)
% % switch(choice)
% %     case(162) % USA
% %         popC = 327.2e6;
% % end


for i = 1:length(CountryShort)              % Parse through all countries
    countryNameCell = CountryShort(i);      % Gather the country's name
    countryName = countryNameCell{1};       % Convert to a string
    isCountry = strcmp(Country,countryName);    % Selection vector
    isCountryPops = strcmp(pops.textdata(:,1),countryName);
    popsData =  pops.data(isCountryPops,:); % Get the data for that country for all years on record
    [~,b]= max(popsData(:,1));
    popCountry = popsData(b,2);
    keyboard
    if ~isempty(b)
        keyboard
        isCountry = isCountry(2:end);               % Remove header line
        for j = 3:size(cases.data,2)-1
            casesCountry(j-2)     = sum(cases.data(isCountry,j));
            deathsCountry(j-2)    = sum(deaths.data(isCountry,j));
            recoveredCountry(j-2) = sum(recovered.data(isCountry,j));
        end
        days = 1:length(casesCountry);
        plotData(countryName,popocasesCountry,deathsCountry,recoveredCountry)
        drawnow
        pause
        close all
    end
end
%%
%
% USA
isUSA = strcmp(Country,'US'); 
%isUSA(200:end) = 0;      % Ignore minor outlaying islands
isUSA = isUSA(2:end);     % Remove the header
% Ohio
isOH = strcmp(Province,'Ohio');
isOH = isOH(2:end);
% Tennessee
isTN = strcmp(Province,'Tennessee');
isTN = isTN(2:end);
% FLorida
isFL   = strcmp(Province,'Florida');
isFL   = isFL(2:end);
% NY
isNY = strcmp(Province,'New York');
isNY = isNY(2:end);
% China
isChina = strcmp(Country,'China');
isChina = isChina(2:end);
% South Korea
isSK = strcmp(Country,'Korea, South');
isSK = isSK(2:end);
% Iran
isIran = strcmp(Country,'Iran');
isIran = isIran(2:end);
% Italy
isItaly = strcmp(Country,'Italy');
isItaly = isItaly(2:end);
% Spain
isSpain = strcmp(Country,'Spain');
isSpain = isSpain(2:end);
% France
isFrance = strcmp(Country,'France');
isFrance = isFrance(2:end);
% Iceland
isIceland = strcmp(Country,'Iceland');
isIceland = isIceland(2:end);
% United Kingdom
isUK = strcmp(Country,'United Kingdom');
isUK = isUK(2:end);
% China
isIsrael = strcmp(Country,'Israel');
isIsrael = isIsrael(2:end);
% Earth
isEarth = ones(size(isUSA));
isEarth = isEarth(2:end);




for i = 3:size(cases.data,2)-1
    
    casesUSA(i-2)     = sum(cases.data(isUSA,i));
    deathsUSA(i-2)    = sum(deaths.data(isUSA,i));
    recoveredUSA(i-2) = sum(recovered.data(isUSA,i));

    casesIceland(i-2)     = sum(cases.data(isIceland,i));
    deathsIceland(i-2)    = sum(deaths.data(isIceland,i));
    recoveredIceland(i-2) = sum(recovered.data(isIceland,i));
    
    casesUK(i-2) = sum(cases.data(isUK,i));
    deathsUK(i-2) = sum(deaths.data(isUK,i));
    recoveredUK(i-2) = sum(recovered.data(isUK,i));
    
    casesIsrael(i-2) = sum(cases.data(isIsrael,i));
    deathsIsrael(i-2) = sum(deaths.data(isIsrael,i));
    recoveredIsrael(i-2) = sum(recovered.data(isIsrael,i));
    
    casesItaly(i-2)     = sum(cases.data(isItaly,i));
    deathsItaly(i-2)    = sum(deaths.data(isItaly,i));
    recoveredItaly(i-2) = sum(recovered.data(isItaly,i));

    casesChina(i-2)     = sum(cases.data(isChina,i));
    deathsChina(i-2)    = sum(deaths.data(isChina,i));
    recoveredChina(i-2) = sum(recovered.data(isChina,i));
    
    casesOH(i-2)      = sum(cases.data(isOH,i));
    deathsOH(i-2)      = sum(deaths.data(isOH,i));
    recoveredOH(i-2)  = sum(recovered.data(isOH,i));
    
    casesFL(i-2)      = sum(cases.data(isFL,i));
    deathsFL(i-2)      = sum(deaths.data(isFL,i));
    recoveredFL(i-2)  = sum(recovered.data(isFL,i));
    
    casesNY(i-2)      = sum(cases.data(isNY,i));
    deathsNY(i-2)      = sum(deaths.data(isNY,i));
    recoveredNY(i-2)  = sum(recovered.data(isNY,i));
    
    casesTN(i-2)      = sum(cases.data(isTN,i));
    deathsTN(i-2)      = sum(deaths.data(isTN,i));
    recoveredTN(i-2)  = sum(recovered.data(isTN,i));
    
    
    casesEarth(i-2)      = sum(cases.data(:,i));
    deathsEarth(i-2)     = sum(deaths.data(:,i));
    recoveredEarth(i-2)   = sum(recovered.data(:,i));
    
%     casesC(i-2)         = sum(cases.data(isCountry,i));
%     deathsC(i-2)        = sum(deaths.data(isCountry,i));
%     recoveredC(i-2)     = sum(recovered.data(isCountry,i));
end

days = 1:length(casesUSA);


%
% Plotting the Data
% 
figure(1)
plotDataStem('Earth',popEarth,casesEarth,deathsEarth,recoveredEarth)
plotDataStem('USA',popUSA,casesUSA,deathsUSA,recoveredUSA)
plotDataStem('Iceland',popIceland,casesIceland,deathsIceland,recoveredIceland)
plotDataStem('Italy',popItaly,casesItaly,deathsItaly,recoveredItaly)
plotDataStem('China',popChina,casesChina,deathsChina,recoveredChina)
plotDataStem('United Kingdom',popUK,casesUK,deathsUK,recoveredUK)
plotDataStem('Israel',popIsrael,casesIsrael,deathsIsrael,recoveredIsrael)
% States of USA
plotDataStem('Ohio',popOH,casesOH,deathsOH,recoveredOH)
plotDataStem('Florida',popFL,casesFL,deathsFL,recoveredFL)
plotDataStem('New York',popNY,casesNY,deathsNY,recoveredNY)
plotDataStem('Tennessee',popTN,casesTN,deathsTN,recoveredTN)
ffig.Children.YScale = 'log';
xlim([0 100])
ylim([1e-8,1])
grid on
title('Comparison')
ylabel('Percent of total Population, %')
xlabel('Days Since Jan 22 2020')



